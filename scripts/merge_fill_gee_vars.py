#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Merge & fill GEE variables into your base dataset.
Usage:
    python scripts/merge_fill_gee_vars.py --input data/dataset_base.csv --gee gee_variables_ecuador_2019_2025.csv --out data/dataset_final.csv
"""

import argparse
import pandas as pd

GEE_COLS = [
    "precipitacion_mm","precip_mm","temp_mean_c","temp_min_c","temp_max_c","rango_diurno_temp_dtr",
    "humedad_relativa_pct","spec_hum_gkg","dewpt_c","soil_moist_pct","elev_m","slope_deg",
    "indice_viento_m_s","ndvi","evi","ndwi","lst_day_c",
    "lst_night_c","et_mm"
]

KEYS = ["anio","semana_epi","codigo_provincia"]

def main(args):
    base = pd.read_csv(args.input)
    gee  = pd.read_csv(args.gee)

    # Normalize keys
    if "semana" in base.columns and "semana_epi" not in base.columns:
        base.rename(columns={"semana":"semana_epi"}, inplace=True)

    # Ensure dtypes
    for df in (base, gee):
        for k in KEYS:
            if k in df.columns:
                df[k] = pd.to_numeric(df[k], errors="coerce").astype("Int64")

    # Subset GEE frame
    use_cols = [c for c in (KEYS + GEE_COLS) if c in gee.columns]
    gee_sel = gee[use_cols].copy()

    # Merge
    merged = base.merge(gee_sel, on=KEYS, how="left", suffixes=("", "_gee"))

    # Fill only where base is NaN
    for c in GEE_COLS:
        if c in merged.columns and c + "_gee" in merged.columns:
            merged[c] = merged[c].where(~merged[c].isna(), merged[c + "_gee"])

    # Drop temp columns
    drop_cols = [c + "_gee" for c in GEE_COLS if c + "_gee" in merged.columns]
    merged.drop(columns=drop_cols, inplace=True, errors="ignore")

    merged.to_csv(args.out, index=False, encoding="utf-8")
    print(f"âœ… Saved: {args.out}")

if __name__ == "__main__":
    p = argparse.ArgumentParser()
    p.add_argument("--input", required=True, help="Path to base CSV (GEE cols empty/NaN)")
    p.add_argument("--gee", required=True, help="CSV generated by gee_extract_dengue_vars.py")
    p.add_argument("--out", default="dataset_final.csv", help="Output CSV path")
    args = p.parse_args()
    main(args)
